{"ast":null,"code":"var _jsxFileName = \"/home/zakharii/Desktop/git/todo-app/src/features/list/List.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteTodoAction, toggleTodoAction, fetchListAction } from './listSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List() {\n  _s();\n\n  const dispatch = useDispatch();\n  const list = useSelector(state => state.list);\n\n  const getLocalStorageData = () => {\n    const localData = localStorage.getItem('todolist');\n\n    if (localData) {\n      const parsedData = JSON.parse(localData);\n      dispatch(fetchListAction(parsedData));\n    }\n  };\n\n  const setLocalStorageData = () => {\n    localStorage.setItem('todolist', JSON.stringify(list));\n  };\n\n  useEffect(() => {\n    getLocalStorageData();\n  }, []);\n  useEffect(() => {\n    setLocalStorageData();\n  }, [list]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"List\",\n    children: list.map(task => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listContainer\",\n        style: task.done ? {\n          backgroundColor: 'green'\n        } : {\n          backgroundColor: 'red'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: task.header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"ADDED ON: \", new Date(task.id).toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => dispatch(deleteTodoAction(task)),\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: () => dispatch(toggleTodoAction(task))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(List, \"LG1GCT/inxw+lJHjWSq10KWknLc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/zakharii/Desktop/git/todo-app/src/features/list/List.js"],"names":["useEffect","useSelector","useDispatch","deleteTodoAction","toggleTodoAction","fetchListAction","List","dispatch","list","state","getLocalStorageData","localData","localStorage","getItem","parsedData","JSON","parse","setLocalStorageData","setItem","stringify","map","task","done","backgroundColor","header","description","Date","id","toString"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,eAA7C,QAAoE,aAApE;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAEd,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,IAAI,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;;AAEA,QAAME,mBAAmB,GAAG,MAAM;AAChC,UAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAlB;;AACA,QAAIF,SAAJ,EAAe;AACb,YAAMG,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAnB;AACAJ,MAAAA,QAAQ,CAACF,eAAe,CAACS,UAAD,CAAhB,CAAR;AACD;AACF,GAND;;AAQA,QAAMG,mBAAmB,GAAG,MAAM;AAChCL,IAAAA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCH,IAAI,CAACI,SAAL,CAAeX,IAAf,CAAjC;AACD,GAFD;;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,EAFM,CAAT;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACT,IAAD,CAFM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACGA,IAAI,CAACY,GAAL,CAASC,IAAI,IAAI;AAChB,0BAAQ;AAAK,QAAA,SAAS,EAAC,eAAf;AACN,QAAA,KAAK,EAAEA,IAAI,CAACC,IAAL,GAAY;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SAAZ,GAA2C;AAAEA,UAAAA,eAAe,EAAE;AAAnB,SAD5C;AAAA,gCAEN;AAAA,oBAAKF,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFM,eAGN;AAAA,oBAAKH,IAAI,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA,gBAHM,eAIN;AAAA,mCAAc,IAAIC,IAAJ,CAASL,IAAI,CAACM,EAAd,EAAkBC,QAAlB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJM,eAKN;AAAA,kCACE;AAAQ,YAAA,OAAO,EAAE,MAAMrB,QAAQ,CAACJ,gBAAgB,CAACkB,IAAD,CAAjB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAuB,YAAA,QAAQ,EAAE,MAAMd,QAAQ,CAACH,gBAAgB,CAACiB,IAAD,CAAjB;AAA/C;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALM;AAAA,SAAoCA,IAAI,CAACM,EAAzC;AAAA;AAAA;AAAA;AAAA,cAAR;AAUD,KAXA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA1CQrB,I;UAEUJ,W,EACJD,W;;;KAHNK,I;AA4CT,eAAeA,IAAf","sourcesContent":["import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteTodoAction, toggleTodoAction, fetchListAction } from './listSlice';\n\nfunction List() {\n\n  const dispatch = useDispatch();\n  const list = useSelector(state => state.list);\n\n  const getLocalStorageData = () => {\n    const localData = localStorage.getItem('todolist');\n    if (localData) {\n      const parsedData = JSON.parse(localData);\n      dispatch(fetchListAction(parsedData));\n    }\n  };\n\n  const setLocalStorageData = () => {\n    localStorage.setItem('todolist', JSON.stringify(list));\n  };\n\n  useEffect(() => {\n    getLocalStorageData();\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageData();\n  }, [list])\n\n\n  return (\n    <div className=\"List\">\n      {list.map(task => {\n        return (<div className=\"listContainer\" key={task.id}\n          style={task.done ? { backgroundColor: 'green' } : { backgroundColor: 'red' }}>\n          <h1>{task.header}</h1>\n          <h2>{task.description}</h2>\n          <p>ADDED ON: {new Date(task.id).toString()}</p>\n          <span>\n            <button onClick={() => dispatch(deleteTodoAction(task))}>DELETE</button>\n            <input type='checkbox' onChange={() => dispatch(toggleTodoAction(task))}/>\n          </span>\n        </div>)\n      })}\n    </div>\n  );\n}\n\nexport default List;"]},"metadata":{},"sourceType":"module"}